You are about to receive the contents of several files that together make up a codebase. After each file's content is provided, please respond with "learned." When you see the phrase "(last-file)" at the beginning of a file, it indicates that it is the final file. Once you have learned the contents of the final file, please provide a list of options for further actions.

The list of options should include the following items (you can add more items based on what you have learned):

Refactor the code
Summarize the code
Optimize performance
Identify potential bugs
Suggest better naming conventions
Provide additional error handling
Suggest additional features
Please wait for the content of each file to be pasted before responding. Remember to only respond with "learned" after each file is pasted, and provide the list of options after learning the contents of the final file marked with "(last-file)".

sendGPT/send1-2.gpt (please, don't forget the original prompt, respond with "learned".)

-------------------------------------------------------------------------------
<!-- README.md -->
# code-to-gpt

`code-to-gpt` is a Go program that reads the contents of the current working directory and its subdirectories up to a maximum recursion depth of 20. The program writes the relative path of each file as a comment, followed by the file's content, to multiple files named "send1-3.gpt", "send2-3.gpt", and "send3-3.gpt" (representing 1 out of 3, 2 out of 3, and 3 out of 3, respectively). This tool is useful for analyzing and discussing code projects with AI language models like OpenAI's ChatGPT.

## Installation

```shell
go install github.com/skelouse/code-to-gpt@latest
```

## Usage

1. Change to the directory you would like to analyze
2. Run `code-to-gpt`
3. Locate the generated `send*-*.gpt` files in the `sendGPT` directory
4. Paste the contents of each file into a separate message to chatGPT
5. Once chatGPT has learned the contents of the final file it will provide a list of options for further actions
6. Respond to chatGPT with the number of the option you would like to discuss, or simply respond with what you would like to have done

### Example Session

```
<content of send*-*.gpt sent in separate messages>
```

Response:

```
learned

Based on the contents of the provided files, here are some options for further actions:

Refactor the code
Summarize the code
Optimize performance
Identify potential bugs
Suggest better naming conventions
Provide additional error handling
Suggest additional features
...
```

## TODO

- [ ] Use urfave/cli for parsing flags
- [ ] Automatically generate a prompt based on the code using go-survey or take options from flags
- [ ] Add flag for specifying the prompt directory
- [ ] Add flag for specifying out filename

## Super Diff

The super-diff.sh script is a utility to output all un-staged changes to a git repository. It works by performing a git diff on un-staged files, displaying the output in the terminal. You can easily redirect the output to a file or copy it to your clipboard.

### Why?

When working with ChatGPT and running super-diff.sh, you can generate a clean representation of your changes and incorporate it into a prompt. This way, you can maintain the context of your work and get more accurate responses.  I have personally used this when developing an API, simply prompt chatGPT for the initial API calls, then use super-diff.sh to show what was done.  Then I can paste it back in as `Awesome thanks! This is what I did {super-diff.sh output} now I would like to implement calls X, Y and Z`.

Note: If you have a problem `git reset`

### Examples

```shell
# Redirect output to a file

$ ./super-diff.sh > diff.txt
```

```shell
# Copy output to clipboard (Linux)
$ ./super-diff.sh | xclip -selection clipboard

# Copy output to clipboard (MacOS)
$ ./super-diff.sh | pbcopy
```

You can also write it as a function in your bashrc or zshrc file:

```shell
# (linux)
function super-diff() {
  ./super-diff.sh | xclip -selection clipboard
}

# (MacOS)
function super-diff() {
  ./super-diff.sh | pbcopy
}
```

-------------------------------------------------------------------------------
// cli/run.go 
package cli

import "github.com/skelouse/code-to-gpt/parser"

func Run() error {
	return parser.Run()
}

-------------------------------------------------------------------------------
# go.mod 
module github.com/skelouse/code-to-gpt

go 1.20

-------------------------------------------------------------------------------
// main.go 
package main

import (
	_ "embed"
	"log"

	"github.com/skelouse/code-to-gpt/cli"
)

func main() {
	if err := cli.Run(); err != nil {
		log.Fatal(err)
	}
}

-------------------------------------------------------------------------------
// parser/helpers.go 
package parser

import (
	"fmt"
	"io"
	"math"
	"os"
	"path/filepath"
	"strings"

	"github.com/skelouse/code-to-gpt/prompts"
)

func isIgnoredFile(filename string) bool {
	for _, ignoreFile := range IgnoreFiles {
		if filename == ignoreFile {
			return true
		}
	}

	fileExt := filepath.Ext(filename)
	for _, ignoreExt := range IgnoreExt {
		if fileExt == ignoreExt {
			return true
		}
	}

	return false
}

func isIgnoredDirectory(directoryName string) bool {
	for _, ignoreDir := range IgnoreDirectories {
		if directoryName == ignoreDir {
			return true
		}
	}

	return false
}

func writeFileContents(basePath, path string, newFile *os.File) error {
	relPath, err := filepath.Rel(basePath, path)
	if err != nil {
		return err
	}

	extension := filepath.Ext(path)
	var (
		commentPrefix string
		commentSuffix string
	)
	switch strings.ToLower(extension) {
	case ".js", ".go", ".java", ".c", ".cpp", ".cs":
		commentPrefix = "//"
	case ".md":
		commentPrefix = "<!--"
		commentSuffix = "-->"
	default:
		commentPrefix = "#"
	}

	_, err = newFile.WriteString(prompts.FileSeparator)
	if err != nil {
		return err
	}

	// Write the comment with the relative path to the "mash.gpt" file
	_, err = newFile.WriteString(fmt.Sprintf("%s %s %s\n", commentPrefix, relPath, commentSuffix))
	if err != nil {
		return err
	}

	// Open the file
	srcFile, err := os.Open(path)
	if err != nil {
		return err
	}
	defer srcFile.Close()

	// Write the contents of the file to the "mash.gpt" file
	_, err = io.Copy(newFile, srcFile)
	if err != nil {
		return err
	}

	// Add a newline after the contents
	_, err = newFile.WriteString("\n")
	if err != nil {
		return err
	}

	return nil
}

func splitMashFile(mashFile *os.File) error {
	fileInfo, err := mashFile.Stat()
	if err != nil {
		return fmt.Errorf("getting mash file information: %s", err)
	}

	fileSize := fileInfo.Size()
	numFiles := int(math.Ceil(float64(fileSize) / float64(MaxFileLength)))

	buffer := make([]byte, MaxFileLength)
	for i := 1; i <= numFiles; i++ {
		bytesRead, err := mashFile.Read(buffer)
		if err != nil && err != io.EOF {
			return fmt.Errorf("reading mash file: %s", err)
		}

		outputFilename := fmt.Sprintf("%s/send%d-%d.gpt", ToSendDirName, i, numFiles)
		outputFile, err := os.Create(outputFilename)
		if err != nil {
			return fmt.Errorf("creating output file: %s", err)
		}
		defer outputFile.Close()

		if i == 1 {
			_, err = outputFile.WriteString(prompts.InitialPrompt)
			if err != nil {
				return fmt.Errorf("writing initial prompt: %s", err)
			}
		}

		var toWriteFileName string
		if i == numFiles {
			toWriteFileName = outputFilename + prompts.LastFileSuffix
		} else {
			// Have to be nice to the overlords
			toWriteFileName = outputFilename + prompts.IntermediateFileSuffix
		}

		_, err = outputFile.WriteString("\n\n" + toWriteFileName)
		if err != nil {
			return fmt.Errorf("writing output file name: %s", err)
		}

		_, err = outputFile.Write(buffer[:bytesRead])
		if err != nil {
			return fmt.Errorf("writing output file: %s", err)
		}
	}

	return nil
}

-------------------------------------------------------------------------------
// parser/parse.go 
package parser

import (
	"io/ioutil"
	"os"
	"path/filepath"
)

func parse(basePath, currentPath string, newFile *os.File, remainingRecursions int) error {
	// Return if the recursion limit has been reached
	if remainingRecursions == 0 {
		return nil
	}

	// Read the contents of the current directory
	files, err := ioutil.ReadDir(currentPath)
	if err != nil {
		return err
	}

	for _, file := range files {
		path := filepath.Join(currentPath, file.Name())

		if file.IsDir() {
			if !isIgnoredDirectory(file.Name()) {
				err := parse(basePath, path, newFile, remainingRecursions-1)
				if err != nil {
					return err
				}
			}
		} else {
			if !isIgnoredFile(file.Name()) {
				err = writeFileContents(basePath, path, newFile)
				if err != nil {
					return err
				}
			}
		}
	}

	return nil
}

-------------------------------------------------------------------------------
// parser/run.go 
package parser

import (
	"fmt"
	"os"
)

func Run() error {
	cwd, err := os.Getwd()
	if err != nil {
		return fmt.Errorf("getting current working directory: %s", err)
	}

	// Remove the send directory if it exists
	if _, err := os.Stat(ToSendDirName); err == nil {
		os.RemoveAll(ToSendDirName)
	}

	if err := os.MkdirAll(ToSendDirName, os.ModePerm); err != nil {
		return fmt.Errorf("creating send directory: %s", err)
	}

	mashFile, err := os.Create(MashFileName)
	if err != nil {
		return fmt.Errorf("creating mash file: %s", err)
	}

	// Clean up the mash file when we're done
	defer func() {
		mashFile.Close()
		err := os.Remove(MashFileName)
		if err != nil {
			panic(fmt.Errorf("removing mash file: %s", err))
		}
	}()

	err = parse(cwd, cwd, mashFile, MaxRecursions)
	if err != nil {
		return fmt.Errorf("parsing files: %s", err)
	}

	// Split the mash file into smaller files to be consumed by chat bot
	mashFile.Seek(0, 0)
	err = splitMashFile(mashFile)
	if err != nil {
		return fmt.Errorf("splitting mash file: %s", err)
	}

	return nil
}

-------------------------------------------------------------------------------
// parser/vars.go 
package parser

var (
	MaxRecursions     = 20
	MaxFileLength     = 10000
	ToSendDirName     = "sendGPT"
	MashFileName      = "mash.gpt"
	IgnoreFiles       = []string{MashFileName}
	IgnoreExt         = []string{".png"}
	IgnoreDirectories = []string{".git", ToSendDirName}
)

-------------------------------------------------------------------------------
<!-- prompts/initial.md -->
You are about to receive the contents of several files that together make up a codebase. After each file's content is provided, please respond with "learned." When you see the phrase "(last-file)" at the beginning of a file, it indicates that it is the final file. Once you have learned the contents of the final file, please provide a list of options for further actions.

The list of options should include the following items (you can add more items based on what you have learned):

Refactor the code
Summarize the code
Optimize performance
Identify potential bugs
Suggest better naming conventions
Provide additional